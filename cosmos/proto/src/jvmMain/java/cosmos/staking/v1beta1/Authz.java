// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/staking/v1beta1/authz.proto

package cosmos.staking.v1beta1;

public final class Authz {
  private Authz() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * AuthorizationType defines the type of staking module authorization type
   *
   * Since: cosmos-sdk 0.43
   * </pre>
   *
   * Protobuf enum {@code cosmos.staking.v1beta1.AuthorizationType}
   */
  public enum AuthorizationType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * AUTHORIZATION_TYPE_UNSPECIFIED specifies an unknown authorization type
     * </pre>
     *
     * <code>AUTHORIZATION_TYPE_UNSPECIFIED = 0;</code>
     */
    AUTHORIZATION_TYPE_UNSPECIFIED(0),
    /**
     * <pre>
     * AUTHORIZATION_TYPE_DELEGATE defines an authorization type for Msg/Delegate
     * </pre>
     *
     * <code>AUTHORIZATION_TYPE_DELEGATE = 1;</code>
     */
    AUTHORIZATION_TYPE_DELEGATE(1),
    /**
     * <pre>
     * AUTHORIZATION_TYPE_UNDELEGATE defines an authorization type for Msg/Undelegate
     * </pre>
     *
     * <code>AUTHORIZATION_TYPE_UNDELEGATE = 2;</code>
     */
    AUTHORIZATION_TYPE_UNDELEGATE(2),
    /**
     * <pre>
     * AUTHORIZATION_TYPE_REDELEGATE defines an authorization type for Msg/BeginRedelegate
     * </pre>
     *
     * <code>AUTHORIZATION_TYPE_REDELEGATE = 3;</code>
     */
    AUTHORIZATION_TYPE_REDELEGATE(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * AUTHORIZATION_TYPE_UNSPECIFIED specifies an unknown authorization type
     * </pre>
     *
     * <code>AUTHORIZATION_TYPE_UNSPECIFIED = 0;</code>
     */
    public static final int AUTHORIZATION_TYPE_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * AUTHORIZATION_TYPE_DELEGATE defines an authorization type for Msg/Delegate
     * </pre>
     *
     * <code>AUTHORIZATION_TYPE_DELEGATE = 1;</code>
     */
    public static final int AUTHORIZATION_TYPE_DELEGATE_VALUE = 1;
    /**
     * <pre>
     * AUTHORIZATION_TYPE_UNDELEGATE defines an authorization type for Msg/Undelegate
     * </pre>
     *
     * <code>AUTHORIZATION_TYPE_UNDELEGATE = 2;</code>
     */
    public static final int AUTHORIZATION_TYPE_UNDELEGATE_VALUE = 2;
    /**
     * <pre>
     * AUTHORIZATION_TYPE_REDELEGATE defines an authorization type for Msg/BeginRedelegate
     * </pre>
     *
     * <code>AUTHORIZATION_TYPE_REDELEGATE = 3;</code>
     */
    public static final int AUTHORIZATION_TYPE_REDELEGATE_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static AuthorizationType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static AuthorizationType forNumber(int value) {
      switch (value) {
        case 0: return AUTHORIZATION_TYPE_UNSPECIFIED;
        case 1: return AUTHORIZATION_TYPE_DELEGATE;
        case 2: return AUTHORIZATION_TYPE_UNDELEGATE;
        case 3: return AUTHORIZATION_TYPE_REDELEGATE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<AuthorizationType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        AuthorizationType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<AuthorizationType>() {
            public AuthorizationType findValueByNumber(int number) {
              return AuthorizationType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return cosmos.staking.v1beta1.Authz.getDescriptor().getEnumTypes().get(0);
    }

    private static final AuthorizationType[] VALUES = values();

    public static AuthorizationType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private AuthorizationType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:cosmos.staking.v1beta1.AuthorizationType)
  }

  public interface StakeAuthorizationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cosmos.staking.v1beta1.StakeAuthorization)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
     * empty, there is no spend limit and any amount of coins can be delegated.
     * </pre>
     *
     * <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [(.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
     * @return Whether the maxTokens field is set.
     */
    boolean hasMaxTokens();
    /**
     * <pre>
     * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
     * empty, there is no spend limit and any amount of coins can be delegated.
     * </pre>
     *
     * <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [(.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
     * @return The maxTokens.
     */
    cosmos.base.v1beta1.CoinOuterClass.Coin getMaxTokens();
    /**
     * <pre>
     * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
     * empty, there is no spend limit and any amount of coins can be delegated.
     * </pre>
     *
     * <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [(.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
     */
    cosmos.base.v1beta1.CoinOuterClass.CoinOrBuilder getMaxTokensOrBuilder();

    /**
     * <pre>
     * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
     * account.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2;</code>
     * @return Whether the allowList field is set.
     */
    boolean hasAllowList();
    /**
     * <pre>
     * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
     * account.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2;</code>
     * @return The allowList.
     */
    cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators getAllowList();
    /**
     * <pre>
     * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
     * account.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2;</code>
     */
    cosmos.staking.v1beta1.Authz.StakeAuthorization.ValidatorsOrBuilder getAllowListOrBuilder();

    /**
     * <pre>
     * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3;</code>
     * @return Whether the denyList field is set.
     */
    boolean hasDenyList();
    /**
     * <pre>
     * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3;</code>
     * @return The denyList.
     */
    cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators getDenyList();
    /**
     * <pre>
     * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3;</code>
     */
    cosmos.staking.v1beta1.Authz.StakeAuthorization.ValidatorsOrBuilder getDenyListOrBuilder();

    /**
     * <pre>
     * authorization_type defines one of AuthorizationType.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.AuthorizationType authorization_type = 4;</code>
     * @return The enum numeric value on the wire for authorizationType.
     */
    int getAuthorizationTypeValue();
    /**
     * <pre>
     * authorization_type defines one of AuthorizationType.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.AuthorizationType authorization_type = 4;</code>
     * @return The authorizationType.
     */
    cosmos.staking.v1beta1.Authz.AuthorizationType getAuthorizationType();

    cosmos.staking.v1beta1.Authz.StakeAuthorization.ValidatorsCase getValidatorsCase();
  }
  /**
   * <pre>
   * StakeAuthorization defines authorization for delegate/undelegate/redelegate.
   *
   * Since: cosmos-sdk 0.43
   * </pre>
   *
   * Protobuf type {@code cosmos.staking.v1beta1.StakeAuthorization}
   */
  public static final class StakeAuthorization extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:cosmos.staking.v1beta1.StakeAuthorization)
      StakeAuthorizationOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StakeAuthorization.newBuilder() to construct.
    private StakeAuthorization(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StakeAuthorization() {
      authorizationType_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new StakeAuthorization();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cosmos.staking.v1beta1.Authz.internal_static_cosmos_staking_v1beta1_StakeAuthorization_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cosmos.staking.v1beta1.Authz.internal_static_cosmos_staking_v1beta1_StakeAuthorization_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cosmos.staking.v1beta1.Authz.StakeAuthorization.class, cosmos.staking.v1beta1.Authz.StakeAuthorization.Builder.class);
    }

    public interface ValidatorsOrBuilder extends
        // @@protoc_insertion_point(interface_extends:cosmos.staking.v1beta1.StakeAuthorization.Validators)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>repeated string address = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
       * @return A list containing the address.
       */
      java.util.List<java.lang.String>
          getAddressList();
      /**
       * <code>repeated string address = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
       * @return The count of address.
       */
      int getAddressCount();
      /**
       * <code>repeated string address = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
       * @param index The index of the element to return.
       * @return The address at the given index.
       */
      java.lang.String getAddress(int index);
      /**
       * <code>repeated string address = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
       * @param index The index of the value to return.
       * @return The bytes of the address at the given index.
       */
      com.google.protobuf.ByteString
          getAddressBytes(int index);
    }
    /**
     * <pre>
     * Validators defines list of validator addresses.
     * </pre>
     *
     * Protobuf type {@code cosmos.staking.v1beta1.StakeAuthorization.Validators}
     */
    public static final class Validators extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:cosmos.staking.v1beta1.StakeAuthorization.Validators)
        ValidatorsOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Validators.newBuilder() to construct.
      private Validators(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Validators() {
        address_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new Validators();
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cosmos.staking.v1beta1.Authz.internal_static_cosmos_staking_v1beta1_StakeAuthorization_Validators_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cosmos.staking.v1beta1.Authz.internal_static_cosmos_staking_v1beta1_StakeAuthorization_Validators_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.class, cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.Builder.class);
      }

      public static final int ADDRESS_FIELD_NUMBER = 1;
      @SuppressWarnings("serial")
      private com.google.protobuf.LazyStringArrayList address_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      /**
       * <code>repeated string address = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
       * @return A list containing the address.
       */
      public com.google.protobuf.ProtocolStringList
          getAddressList() {
        return address_;
      }
      /**
       * <code>repeated string address = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
       * @return The count of address.
       */
      public int getAddressCount() {
        return address_.size();
      }
      /**
       * <code>repeated string address = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
       * @param index The index of the element to return.
       * @return The address at the given index.
       */
      public java.lang.String getAddress(int index) {
        return address_.get(index);
      }
      /**
       * <code>repeated string address = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
       * @param index The index of the value to return.
       * @return The bytes of the address at the given index.
       */
      public com.google.protobuf.ByteString
          getAddressBytes(int index) {
        return address_.getByteString(index);
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        for (int i = 0; i < address_.size(); i++) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, address_.getRaw(i));
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        {
          int dataSize = 0;
          for (int i = 0; i < address_.size(); i++) {
            dataSize += computeStringSizeNoTag(address_.getRaw(i));
          }
          size += dataSize;
          size += 1 * getAddressList().size();
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators)) {
          return super.equals(obj);
        }
        cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators other = (cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators) obj;

        if (!getAddressList()
            .equals(other.getAddressList())) return false;
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (getAddressCount() > 0) {
          hash = (37 * hash) + ADDRESS_FIELD_NUMBER;
          hash = (53 * hash) + getAddressList().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Validators defines list of validator addresses.
       * </pre>
       *
       * Protobuf type {@code cosmos.staking.v1beta1.StakeAuthorization.Validators}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:cosmos.staking.v1beta1.StakeAuthorization.Validators)
          cosmos.staking.v1beta1.Authz.StakeAuthorization.ValidatorsOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return cosmos.staking.v1beta1.Authz.internal_static_cosmos_staking_v1beta1_StakeAuthorization_Validators_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return cosmos.staking.v1beta1.Authz.internal_static_cosmos_staking_v1beta1_StakeAuthorization_Validators_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.class, cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.Builder.class);
        }

        // Construct using cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          address_ =
              com.google.protobuf.LazyStringArrayList.emptyList();
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return cosmos.staking.v1beta1.Authz.internal_static_cosmos_staking_v1beta1_StakeAuthorization_Validators_descriptor;
        }

        @java.lang.Override
        public cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators getDefaultInstanceForType() {
          return cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.getDefaultInstance();
        }

        @java.lang.Override
        public cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators build() {
          cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators buildPartial() {
          cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators result = new cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators result) {
          int from_bitField0_ = bitField0_;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            address_.makeImmutable();
            result.address_ = address_;
          }
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators) {
            return mergeFrom((cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators other) {
          if (other == cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.getDefaultInstance()) return this;
          if (!other.address_.isEmpty()) {
            if (address_.isEmpty()) {
              address_ = other.address_;
              bitField0_ |= 0x00000001;
            } else {
              ensureAddressIsMutable();
              address_.addAll(other.address_);
            }
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  java.lang.String s = input.readStringRequireUtf8();
                  ensureAddressIsMutable();
                  address_.add(s);
                  break;
                } // case 10
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private com.google.protobuf.LazyStringArrayList address_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
        private void ensureAddressIsMutable() {
          if (!address_.isModifiable()) {
            address_ = new com.google.protobuf.LazyStringArrayList(address_);
          }
          bitField0_ |= 0x00000001;
        }
        /**
         * <code>repeated string address = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
         * @return A list containing the address.
         */
        public com.google.protobuf.ProtocolStringList
            getAddressList() {
          address_.makeImmutable();
          return address_;
        }
        /**
         * <code>repeated string address = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
         * @return The count of address.
         */
        public int getAddressCount() {
          return address_.size();
        }
        /**
         * <code>repeated string address = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
         * @param index The index of the element to return.
         * @return The address at the given index.
         */
        public java.lang.String getAddress(int index) {
          return address_.get(index);
        }
        /**
         * <code>repeated string address = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
         * @param index The index of the value to return.
         * @return The bytes of the address at the given index.
         */
        public com.google.protobuf.ByteString
            getAddressBytes(int index) {
          return address_.getByteString(index);
        }
        /**
         * <code>repeated string address = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
         * @param index The index to set the value at.
         * @param value The address to set.
         * @return This builder for chaining.
         */
        public Builder setAddress(
            int index, java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          ensureAddressIsMutable();
          address_.set(index, value);
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <code>repeated string address = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
         * @param value The address to add.
         * @return This builder for chaining.
         */
        public Builder addAddress(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          ensureAddressIsMutable();
          address_.add(value);
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <code>repeated string address = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
         * @param values The address to add.
         * @return This builder for chaining.
         */
        public Builder addAllAddress(
            java.lang.Iterable<java.lang.String> values) {
          ensureAddressIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, address_);
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <code>repeated string address = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
         * @return This builder for chaining.
         */
        public Builder clearAddress() {
          address_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);;
          onChanged();
          return this;
        }
        /**
         * <code>repeated string address = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
         * @param value The bytes of the address to add.
         * @return This builder for chaining.
         */
        public Builder addAddressBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          checkByteStringIsUtf8(value);
          ensureAddressIsMutable();
          address_.add(value);
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:cosmos.staking.v1beta1.StakeAuthorization.Validators)
      }

      // @@protoc_insertion_point(class_scope:cosmos.staking.v1beta1.StakeAuthorization.Validators)
      private static final cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators();
      }

      public static cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Validators>
          PARSER = new com.google.protobuf.AbstractParser<Validators>() {
        @java.lang.Override
        public Validators parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<Validators> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Validators> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int validatorsCase_ = 0;
    @SuppressWarnings("serial")
    private java.lang.Object validators_;
    public enum ValidatorsCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      ALLOW_LIST(2),
      DENY_LIST(3),
      VALIDATORS_NOT_SET(0);
      private final int value;
      private ValidatorsCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ValidatorsCase valueOf(int value) {
        return forNumber(value);
      }

      public static ValidatorsCase forNumber(int value) {
        switch (value) {
          case 2: return ALLOW_LIST;
          case 3: return DENY_LIST;
          case 0: return VALIDATORS_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ValidatorsCase
    getValidatorsCase() {
      return ValidatorsCase.forNumber(
          validatorsCase_);
    }

    public static final int MAX_TOKENS_FIELD_NUMBER = 1;
    private cosmos.base.v1beta1.CoinOuterClass.Coin maxTokens_;
    /**
     * <pre>
     * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
     * empty, there is no spend limit and any amount of coins can be delegated.
     * </pre>
     *
     * <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [(.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
     * @return Whether the maxTokens field is set.
     */
    @java.lang.Override
    public boolean hasMaxTokens() {
      return maxTokens_ != null;
    }
    /**
     * <pre>
     * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
     * empty, there is no spend limit and any amount of coins can be delegated.
     * </pre>
     *
     * <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [(.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
     * @return The maxTokens.
     */
    @java.lang.Override
    public cosmos.base.v1beta1.CoinOuterClass.Coin getMaxTokens() {
      return maxTokens_ == null ? cosmos.base.v1beta1.CoinOuterClass.Coin.getDefaultInstance() : maxTokens_;
    }
    /**
     * <pre>
     * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
     * empty, there is no spend limit and any amount of coins can be delegated.
     * </pre>
     *
     * <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [(.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
     */
    @java.lang.Override
    public cosmos.base.v1beta1.CoinOuterClass.CoinOrBuilder getMaxTokensOrBuilder() {
      return maxTokens_ == null ? cosmos.base.v1beta1.CoinOuterClass.Coin.getDefaultInstance() : maxTokens_;
    }

    public static final int ALLOW_LIST_FIELD_NUMBER = 2;
    /**
     * <pre>
     * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
     * account.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2;</code>
     * @return Whether the allowList field is set.
     */
    @java.lang.Override
    public boolean hasAllowList() {
      return validatorsCase_ == 2;
    }
    /**
     * <pre>
     * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
     * account.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2;</code>
     * @return The allowList.
     */
    @java.lang.Override
    public cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators getAllowList() {
      if (validatorsCase_ == 2) {
         return (cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators) validators_;
      }
      return cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.getDefaultInstance();
    }
    /**
     * <pre>
     * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
     * account.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2;</code>
     */
    @java.lang.Override
    public cosmos.staking.v1beta1.Authz.StakeAuthorization.ValidatorsOrBuilder getAllowListOrBuilder() {
      if (validatorsCase_ == 2) {
         return (cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators) validators_;
      }
      return cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.getDefaultInstance();
    }

    public static final int DENY_LIST_FIELD_NUMBER = 3;
    /**
     * <pre>
     * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3;</code>
     * @return Whether the denyList field is set.
     */
    @java.lang.Override
    public boolean hasDenyList() {
      return validatorsCase_ == 3;
    }
    /**
     * <pre>
     * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3;</code>
     * @return The denyList.
     */
    @java.lang.Override
    public cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators getDenyList() {
      if (validatorsCase_ == 3) {
         return (cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators) validators_;
      }
      return cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.getDefaultInstance();
    }
    /**
     * <pre>
     * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3;</code>
     */
    @java.lang.Override
    public cosmos.staking.v1beta1.Authz.StakeAuthorization.ValidatorsOrBuilder getDenyListOrBuilder() {
      if (validatorsCase_ == 3) {
         return (cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators) validators_;
      }
      return cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.getDefaultInstance();
    }

    public static final int AUTHORIZATION_TYPE_FIELD_NUMBER = 4;
    private int authorizationType_ = 0;
    /**
     * <pre>
     * authorization_type defines one of AuthorizationType.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.AuthorizationType authorization_type = 4;</code>
     * @return The enum numeric value on the wire for authorizationType.
     */
    @java.lang.Override public int getAuthorizationTypeValue() {
      return authorizationType_;
    }
    /**
     * <pre>
     * authorization_type defines one of AuthorizationType.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.AuthorizationType authorization_type = 4;</code>
     * @return The authorizationType.
     */
    @java.lang.Override public cosmos.staking.v1beta1.Authz.AuthorizationType getAuthorizationType() {
      cosmos.staking.v1beta1.Authz.AuthorizationType result = cosmos.staking.v1beta1.Authz.AuthorizationType.forNumber(authorizationType_);
      return result == null ? cosmos.staking.v1beta1.Authz.AuthorizationType.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (maxTokens_ != null) {
        output.writeMessage(1, getMaxTokens());
      }
      if (validatorsCase_ == 2) {
        output.writeMessage(2, (cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators) validators_);
      }
      if (validatorsCase_ == 3) {
        output.writeMessage(3, (cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators) validators_);
      }
      if (authorizationType_ != cosmos.staking.v1beta1.Authz.AuthorizationType.AUTHORIZATION_TYPE_UNSPECIFIED.getNumber()) {
        output.writeEnum(4, authorizationType_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (maxTokens_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getMaxTokens());
      }
      if (validatorsCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators) validators_);
      }
      if (validatorsCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators) validators_);
      }
      if (authorizationType_ != cosmos.staking.v1beta1.Authz.AuthorizationType.AUTHORIZATION_TYPE_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, authorizationType_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cosmos.staking.v1beta1.Authz.StakeAuthorization)) {
        return super.equals(obj);
      }
      cosmos.staking.v1beta1.Authz.StakeAuthorization other = (cosmos.staking.v1beta1.Authz.StakeAuthorization) obj;

      if (hasMaxTokens() != other.hasMaxTokens()) return false;
      if (hasMaxTokens()) {
        if (!getMaxTokens()
            .equals(other.getMaxTokens())) return false;
      }
      if (authorizationType_ != other.authorizationType_) return false;
      if (!getValidatorsCase().equals(other.getValidatorsCase())) return false;
      switch (validatorsCase_) {
        case 2:
          if (!getAllowList()
              .equals(other.getAllowList())) return false;
          break;
        case 3:
          if (!getDenyList()
              .equals(other.getDenyList())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasMaxTokens()) {
        hash = (37 * hash) + MAX_TOKENS_FIELD_NUMBER;
        hash = (53 * hash) + getMaxTokens().hashCode();
      }
      hash = (37 * hash) + AUTHORIZATION_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + authorizationType_;
      switch (validatorsCase_) {
        case 2:
          hash = (37 * hash) + ALLOW_LIST_FIELD_NUMBER;
          hash = (53 * hash) + getAllowList().hashCode();
          break;
        case 3:
          hash = (37 * hash) + DENY_LIST_FIELD_NUMBER;
          hash = (53 * hash) + getDenyList().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cosmos.staking.v1beta1.Authz.StakeAuthorization parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cosmos.staking.v1beta1.Authz.StakeAuthorization parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cosmos.staking.v1beta1.Authz.StakeAuthorization parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cosmos.staking.v1beta1.Authz.StakeAuthorization parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cosmos.staking.v1beta1.Authz.StakeAuthorization parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cosmos.staking.v1beta1.Authz.StakeAuthorization parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cosmos.staking.v1beta1.Authz.StakeAuthorization parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static cosmos.staking.v1beta1.Authz.StakeAuthorization parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static cosmos.staking.v1beta1.Authz.StakeAuthorization parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static cosmos.staking.v1beta1.Authz.StakeAuthorization parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cosmos.staking.v1beta1.Authz.StakeAuthorization parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static cosmos.staking.v1beta1.Authz.StakeAuthorization parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cosmos.staking.v1beta1.Authz.StakeAuthorization prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * StakeAuthorization defines authorization for delegate/undelegate/redelegate.
     *
     * Since: cosmos-sdk 0.43
     * </pre>
     *
     * Protobuf type {@code cosmos.staking.v1beta1.StakeAuthorization}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cosmos.staking.v1beta1.StakeAuthorization)
        cosmos.staking.v1beta1.Authz.StakeAuthorizationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cosmos.staking.v1beta1.Authz.internal_static_cosmos_staking_v1beta1_StakeAuthorization_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cosmos.staking.v1beta1.Authz.internal_static_cosmos_staking_v1beta1_StakeAuthorization_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cosmos.staking.v1beta1.Authz.StakeAuthorization.class, cosmos.staking.v1beta1.Authz.StakeAuthorization.Builder.class);
      }

      // Construct using cosmos.staking.v1beta1.Authz.StakeAuthorization.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        maxTokens_ = null;
        if (maxTokensBuilder_ != null) {
          maxTokensBuilder_.dispose();
          maxTokensBuilder_ = null;
        }
        if (allowListBuilder_ != null) {
          allowListBuilder_.clear();
        }
        if (denyListBuilder_ != null) {
          denyListBuilder_.clear();
        }
        authorizationType_ = 0;
        validatorsCase_ = 0;
        validators_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cosmos.staking.v1beta1.Authz.internal_static_cosmos_staking_v1beta1_StakeAuthorization_descriptor;
      }

      @java.lang.Override
      public cosmos.staking.v1beta1.Authz.StakeAuthorization getDefaultInstanceForType() {
        return cosmos.staking.v1beta1.Authz.StakeAuthorization.getDefaultInstance();
      }

      @java.lang.Override
      public cosmos.staking.v1beta1.Authz.StakeAuthorization build() {
        cosmos.staking.v1beta1.Authz.StakeAuthorization result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cosmos.staking.v1beta1.Authz.StakeAuthorization buildPartial() {
        cosmos.staking.v1beta1.Authz.StakeAuthorization result = new cosmos.staking.v1beta1.Authz.StakeAuthorization(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartial0(cosmos.staking.v1beta1.Authz.StakeAuthorization result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.maxTokens_ = maxTokensBuilder_ == null
              ? maxTokens_
              : maxTokensBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.authorizationType_ = authorizationType_;
        }
      }

      private void buildPartialOneofs(cosmos.staking.v1beta1.Authz.StakeAuthorization result) {
        result.validatorsCase_ = validatorsCase_;
        result.validators_ = this.validators_;
        if (validatorsCase_ == 2 &&
            allowListBuilder_ != null) {
          result.validators_ = allowListBuilder_.build();
        }
        if (validatorsCase_ == 3 &&
            denyListBuilder_ != null) {
          result.validators_ = denyListBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cosmos.staking.v1beta1.Authz.StakeAuthorization) {
          return mergeFrom((cosmos.staking.v1beta1.Authz.StakeAuthorization)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cosmos.staking.v1beta1.Authz.StakeAuthorization other) {
        if (other == cosmos.staking.v1beta1.Authz.StakeAuthorization.getDefaultInstance()) return this;
        if (other.hasMaxTokens()) {
          mergeMaxTokens(other.getMaxTokens());
        }
        if (other.authorizationType_ != 0) {
          setAuthorizationTypeValue(other.getAuthorizationTypeValue());
        }
        switch (other.getValidatorsCase()) {
          case ALLOW_LIST: {
            mergeAllowList(other.getAllowList());
            break;
          }
          case DENY_LIST: {
            mergeDenyList(other.getDenyList());
            break;
          }
          case VALIDATORS_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getMaxTokensFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getAllowListFieldBuilder().getBuilder(),
                    extensionRegistry);
                validatorsCase_ = 2;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getDenyListFieldBuilder().getBuilder(),
                    extensionRegistry);
                validatorsCase_ = 3;
                break;
              } // case 26
              case 32: {
                authorizationType_ = input.readEnum();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int validatorsCase_ = 0;
      private java.lang.Object validators_;
      public ValidatorsCase
          getValidatorsCase() {
        return ValidatorsCase.forNumber(
            validatorsCase_);
      }

      public Builder clearValidators() {
        validatorsCase_ = 0;
        validators_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private cosmos.base.v1beta1.CoinOuterClass.Coin maxTokens_;
      private com.google.protobuf.SingleFieldBuilderV3<
          cosmos.base.v1beta1.CoinOuterClass.Coin, cosmos.base.v1beta1.CoinOuterClass.Coin.Builder, cosmos.base.v1beta1.CoinOuterClass.CoinOrBuilder> maxTokensBuilder_;
      /**
       * <pre>
       * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
       * empty, there is no spend limit and any amount of coins can be delegated.
       * </pre>
       *
       * <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [(.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
       * @return Whether the maxTokens field is set.
       */
      public boolean hasMaxTokens() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
       * empty, there is no spend limit and any amount of coins can be delegated.
       * </pre>
       *
       * <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [(.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
       * @return The maxTokens.
       */
      public cosmos.base.v1beta1.CoinOuterClass.Coin getMaxTokens() {
        if (maxTokensBuilder_ == null) {
          return maxTokens_ == null ? cosmos.base.v1beta1.CoinOuterClass.Coin.getDefaultInstance() : maxTokens_;
        } else {
          return maxTokensBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
       * empty, there is no spend limit and any amount of coins can be delegated.
       * </pre>
       *
       * <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [(.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
       */
      public Builder setMaxTokens(cosmos.base.v1beta1.CoinOuterClass.Coin value) {
        if (maxTokensBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxTokens_ = value;
        } else {
          maxTokensBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
       * empty, there is no spend limit and any amount of coins can be delegated.
       * </pre>
       *
       * <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [(.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
       */
      public Builder setMaxTokens(
          cosmos.base.v1beta1.CoinOuterClass.Coin.Builder builderForValue) {
        if (maxTokensBuilder_ == null) {
          maxTokens_ = builderForValue.build();
        } else {
          maxTokensBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
       * empty, there is no spend limit and any amount of coins can be delegated.
       * </pre>
       *
       * <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [(.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
       */
      public Builder mergeMaxTokens(cosmos.base.v1beta1.CoinOuterClass.Coin value) {
        if (maxTokensBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            maxTokens_ != null &&
            maxTokens_ != cosmos.base.v1beta1.CoinOuterClass.Coin.getDefaultInstance()) {
            getMaxTokensBuilder().mergeFrom(value);
          } else {
            maxTokens_ = value;
          }
        } else {
          maxTokensBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
       * empty, there is no spend limit and any amount of coins can be delegated.
       * </pre>
       *
       * <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [(.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
       */
      public Builder clearMaxTokens() {
        bitField0_ = (bitField0_ & ~0x00000001);
        maxTokens_ = null;
        if (maxTokensBuilder_ != null) {
          maxTokensBuilder_.dispose();
          maxTokensBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
       * empty, there is no spend limit and any amount of coins can be delegated.
       * </pre>
       *
       * <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [(.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
       */
      public cosmos.base.v1beta1.CoinOuterClass.Coin.Builder getMaxTokensBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getMaxTokensFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
       * empty, there is no spend limit and any amount of coins can be delegated.
       * </pre>
       *
       * <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [(.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
       */
      public cosmos.base.v1beta1.CoinOuterClass.CoinOrBuilder getMaxTokensOrBuilder() {
        if (maxTokensBuilder_ != null) {
          return maxTokensBuilder_.getMessageOrBuilder();
        } else {
          return maxTokens_ == null ?
              cosmos.base.v1beta1.CoinOuterClass.Coin.getDefaultInstance() : maxTokens_;
        }
      }
      /**
       * <pre>
       * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
       * empty, there is no spend limit and any amount of coins can be delegated.
       * </pre>
       *
       * <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [(.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          cosmos.base.v1beta1.CoinOuterClass.Coin, cosmos.base.v1beta1.CoinOuterClass.Coin.Builder, cosmos.base.v1beta1.CoinOuterClass.CoinOrBuilder> 
          getMaxTokensFieldBuilder() {
        if (maxTokensBuilder_ == null) {
          maxTokensBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              cosmos.base.v1beta1.CoinOuterClass.Coin, cosmos.base.v1beta1.CoinOuterClass.Coin.Builder, cosmos.base.v1beta1.CoinOuterClass.CoinOrBuilder>(
                  getMaxTokens(),
                  getParentForChildren(),
                  isClean());
          maxTokens_ = null;
        }
        return maxTokensBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators, cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.Builder, cosmos.staking.v1beta1.Authz.StakeAuthorization.ValidatorsOrBuilder> allowListBuilder_;
      /**
       * <pre>
       * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
       * account.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2;</code>
       * @return Whether the allowList field is set.
       */
      @java.lang.Override
      public boolean hasAllowList() {
        return validatorsCase_ == 2;
      }
      /**
       * <pre>
       * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
       * account.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2;</code>
       * @return The allowList.
       */
      @java.lang.Override
      public cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators getAllowList() {
        if (allowListBuilder_ == null) {
          if (validatorsCase_ == 2) {
            return (cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators) validators_;
          }
          return cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.getDefaultInstance();
        } else {
          if (validatorsCase_ == 2) {
            return allowListBuilder_.getMessage();
          }
          return cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
       * account.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2;</code>
       */
      public Builder setAllowList(cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators value) {
        if (allowListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          validators_ = value;
          onChanged();
        } else {
          allowListBuilder_.setMessage(value);
        }
        validatorsCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
       * account.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2;</code>
       */
      public Builder setAllowList(
          cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.Builder builderForValue) {
        if (allowListBuilder_ == null) {
          validators_ = builderForValue.build();
          onChanged();
        } else {
          allowListBuilder_.setMessage(builderForValue.build());
        }
        validatorsCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
       * account.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2;</code>
       */
      public Builder mergeAllowList(cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators value) {
        if (allowListBuilder_ == null) {
          if (validatorsCase_ == 2 &&
              validators_ != cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.getDefaultInstance()) {
            validators_ = cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.newBuilder((cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators) validators_)
                .mergeFrom(value).buildPartial();
          } else {
            validators_ = value;
          }
          onChanged();
        } else {
          if (validatorsCase_ == 2) {
            allowListBuilder_.mergeFrom(value);
          } else {
            allowListBuilder_.setMessage(value);
          }
        }
        validatorsCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
       * account.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2;</code>
       */
      public Builder clearAllowList() {
        if (allowListBuilder_ == null) {
          if (validatorsCase_ == 2) {
            validatorsCase_ = 0;
            validators_ = null;
            onChanged();
          }
        } else {
          if (validatorsCase_ == 2) {
            validatorsCase_ = 0;
            validators_ = null;
          }
          allowListBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
       * account.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2;</code>
       */
      public cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.Builder getAllowListBuilder() {
        return getAllowListFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
       * account.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2;</code>
       */
      @java.lang.Override
      public cosmos.staking.v1beta1.Authz.StakeAuthorization.ValidatorsOrBuilder getAllowListOrBuilder() {
        if ((validatorsCase_ == 2) && (allowListBuilder_ != null)) {
          return allowListBuilder_.getMessageOrBuilder();
        } else {
          if (validatorsCase_ == 2) {
            return (cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators) validators_;
          }
          return cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
       * account.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators, cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.Builder, cosmos.staking.v1beta1.Authz.StakeAuthorization.ValidatorsOrBuilder> 
          getAllowListFieldBuilder() {
        if (allowListBuilder_ == null) {
          if (!(validatorsCase_ == 2)) {
            validators_ = cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.getDefaultInstance();
          }
          allowListBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators, cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.Builder, cosmos.staking.v1beta1.Authz.StakeAuthorization.ValidatorsOrBuilder>(
                  (cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators) validators_,
                  getParentForChildren(),
                  isClean());
          validators_ = null;
        }
        validatorsCase_ = 2;
        onChanged();
        return allowListBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators, cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.Builder, cosmos.staking.v1beta1.Authz.StakeAuthorization.ValidatorsOrBuilder> denyListBuilder_;
      /**
       * <pre>
       * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3;</code>
       * @return Whether the denyList field is set.
       */
      @java.lang.Override
      public boolean hasDenyList() {
        return validatorsCase_ == 3;
      }
      /**
       * <pre>
       * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3;</code>
       * @return The denyList.
       */
      @java.lang.Override
      public cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators getDenyList() {
        if (denyListBuilder_ == null) {
          if (validatorsCase_ == 3) {
            return (cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators) validators_;
          }
          return cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.getDefaultInstance();
        } else {
          if (validatorsCase_ == 3) {
            return denyListBuilder_.getMessage();
          }
          return cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3;</code>
       */
      public Builder setDenyList(cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators value) {
        if (denyListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          validators_ = value;
          onChanged();
        } else {
          denyListBuilder_.setMessage(value);
        }
        validatorsCase_ = 3;
        return this;
      }
      /**
       * <pre>
       * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3;</code>
       */
      public Builder setDenyList(
          cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.Builder builderForValue) {
        if (denyListBuilder_ == null) {
          validators_ = builderForValue.build();
          onChanged();
        } else {
          denyListBuilder_.setMessage(builderForValue.build());
        }
        validatorsCase_ = 3;
        return this;
      }
      /**
       * <pre>
       * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3;</code>
       */
      public Builder mergeDenyList(cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators value) {
        if (denyListBuilder_ == null) {
          if (validatorsCase_ == 3 &&
              validators_ != cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.getDefaultInstance()) {
            validators_ = cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.newBuilder((cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators) validators_)
                .mergeFrom(value).buildPartial();
          } else {
            validators_ = value;
          }
          onChanged();
        } else {
          if (validatorsCase_ == 3) {
            denyListBuilder_.mergeFrom(value);
          } else {
            denyListBuilder_.setMessage(value);
          }
        }
        validatorsCase_ = 3;
        return this;
      }
      /**
       * <pre>
       * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3;</code>
       */
      public Builder clearDenyList() {
        if (denyListBuilder_ == null) {
          if (validatorsCase_ == 3) {
            validatorsCase_ = 0;
            validators_ = null;
            onChanged();
          }
        } else {
          if (validatorsCase_ == 3) {
            validatorsCase_ = 0;
            validators_ = null;
          }
          denyListBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3;</code>
       */
      public cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.Builder getDenyListBuilder() {
        return getDenyListFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3;</code>
       */
      @java.lang.Override
      public cosmos.staking.v1beta1.Authz.StakeAuthorization.ValidatorsOrBuilder getDenyListOrBuilder() {
        if ((validatorsCase_ == 3) && (denyListBuilder_ != null)) {
          return denyListBuilder_.getMessageOrBuilder();
        } else {
          if (validatorsCase_ == 3) {
            return (cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators) validators_;
          }
          return cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators, cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.Builder, cosmos.staking.v1beta1.Authz.StakeAuthorization.ValidatorsOrBuilder> 
          getDenyListFieldBuilder() {
        if (denyListBuilder_ == null) {
          if (!(validatorsCase_ == 3)) {
            validators_ = cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.getDefaultInstance();
          }
          denyListBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators, cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators.Builder, cosmos.staking.v1beta1.Authz.StakeAuthorization.ValidatorsOrBuilder>(
                  (cosmos.staking.v1beta1.Authz.StakeAuthorization.Validators) validators_,
                  getParentForChildren(),
                  isClean());
          validators_ = null;
        }
        validatorsCase_ = 3;
        onChanged();
        return denyListBuilder_;
      }

      private int authorizationType_ = 0;
      /**
       * <pre>
       * authorization_type defines one of AuthorizationType.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.AuthorizationType authorization_type = 4;</code>
       * @return The enum numeric value on the wire for authorizationType.
       */
      @java.lang.Override public int getAuthorizationTypeValue() {
        return authorizationType_;
      }
      /**
       * <pre>
       * authorization_type defines one of AuthorizationType.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.AuthorizationType authorization_type = 4;</code>
       * @param value The enum numeric value on the wire for authorizationType to set.
       * @return This builder for chaining.
       */
      public Builder setAuthorizationTypeValue(int value) {
        authorizationType_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * authorization_type defines one of AuthorizationType.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.AuthorizationType authorization_type = 4;</code>
       * @return The authorizationType.
       */
      @java.lang.Override
      public cosmos.staking.v1beta1.Authz.AuthorizationType getAuthorizationType() {
        cosmos.staking.v1beta1.Authz.AuthorizationType result = cosmos.staking.v1beta1.Authz.AuthorizationType.forNumber(authorizationType_);
        return result == null ? cosmos.staking.v1beta1.Authz.AuthorizationType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * authorization_type defines one of AuthorizationType.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.AuthorizationType authorization_type = 4;</code>
       * @param value The authorizationType to set.
       * @return This builder for chaining.
       */
      public Builder setAuthorizationType(cosmos.staking.v1beta1.Authz.AuthorizationType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        authorizationType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * authorization_type defines one of AuthorizationType.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.AuthorizationType authorization_type = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearAuthorizationType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        authorizationType_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:cosmos.staking.v1beta1.StakeAuthorization)
    }

    // @@protoc_insertion_point(class_scope:cosmos.staking.v1beta1.StakeAuthorization)
    private static final cosmos.staking.v1beta1.Authz.StakeAuthorization DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cosmos.staking.v1beta1.Authz.StakeAuthorization();
    }

    public static cosmos.staking.v1beta1.Authz.StakeAuthorization getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StakeAuthorization>
        PARSER = new com.google.protobuf.AbstractParser<StakeAuthorization>() {
      @java.lang.Override
      public StakeAuthorization parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<StakeAuthorization> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StakeAuthorization> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cosmos.staking.v1beta1.Authz.StakeAuthorization getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cosmos_staking_v1beta1_StakeAuthorization_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_cosmos_staking_v1beta1_StakeAuthorization_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cosmos_staking_v1beta1_StakeAuthorization_Validators_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_cosmos_staking_v1beta1_StakeAuthorization_Validators_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\"cosmos/staking/v1beta1/authz.proto\022\026co" +
      "smos.staking.v1beta1\032\024gogoproto/gogo.pro" +
      "to\032\031cosmos_proto/cosmos.proto\032\036cosmos/ba" +
      "se/v1beta1/coin.proto\032\021amino/amino.proto" +
      "\"\341\003\n\022StakeAuthorization\022Z\n\nmax_tokens\030\001 " +
      "\001(\0132\031.cosmos.base.v1beta1.CoinB+\252\337\037\'gith" +
      "ub.com/cosmos/cosmos-sdk/types.Coin\022K\n\na" +
      "llow_list\030\002 \001(\01325.cosmos.staking.v1beta1" +
      ".StakeAuthorization.ValidatorsH\000\022J\n\tdeny" +
      "_list\030\003 \001(\01325.cosmos.staking.v1beta1.Sta" +
      "keAuthorization.ValidatorsH\000\022E\n\022authoriz" +
      "ation_type\030\004 \001(\0162).cosmos.staking.v1beta" +
      "1.AuthorizationType\0327\n\nValidators\022)\n\007add" +
      "ress\030\001 \003(\tB\030\322\264-\024cosmos.AddressString:H\312\264" +
      "-\"cosmos.authz.v1beta1.Authorization\212\347\260*" +
      "\035cosmos-sdk/StakeAuthorizationB\014\n\nvalida" +
      "tors*\236\001\n\021AuthorizationType\022\"\n\036AUTHORIZAT" +
      "ION_TYPE_UNSPECIFIED\020\000\022\037\n\033AUTHORIZATION_" +
      "TYPE_DELEGATE\020\001\022!\n\035AUTHORIZATION_TYPE_UN" +
      "DELEGATE\020\002\022!\n\035AUTHORIZATION_TYPE_REDELEG" +
      "ATE\020\003B.Z,github.com/cosmos/cosmos-sdk/x/" +
      "staking/typesb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.GoGoProtos.getDescriptor(),
          cosmos_proto.Cosmos.getDescriptor(),
          cosmos.base.v1beta1.CoinOuterClass.getDescriptor(),
          amino.Amino.getDescriptor(),
        });
    internal_static_cosmos_staking_v1beta1_StakeAuthorization_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_cosmos_staking_v1beta1_StakeAuthorization_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_cosmos_staking_v1beta1_StakeAuthorization_descriptor,
        new java.lang.String[] { "MaxTokens", "AllowList", "DenyList", "AuthorizationType", "Validators", });
    internal_static_cosmos_staking_v1beta1_StakeAuthorization_Validators_descriptor =
      internal_static_cosmos_staking_v1beta1_StakeAuthorization_descriptor.getNestedTypes().get(0);
    internal_static_cosmos_staking_v1beta1_StakeAuthorization_Validators_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_cosmos_staking_v1beta1_StakeAuthorization_Validators_descriptor,
        new java.lang.String[] { "Address", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(amino.Amino.name);
    registry.add(cosmos_proto.Cosmos.implementsInterface);
    registry.add(cosmos_proto.Cosmos.scalar);
    registry.add(com.google.protobuf.GoGoProtos.castrepeated);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.google.protobuf.GoGoProtos.getDescriptor();
    cosmos_proto.Cosmos.getDescriptor();
    cosmos.base.v1beta1.CoinOuterClass.getDescriptor();
    amino.Amino.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
